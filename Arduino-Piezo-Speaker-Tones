//Techatronic.com  
 /*   
  Connect a piezo buzzer or speaker to pin 11 or select a new pin.  
  More songs available at https://github.com/robsoncouto/arduino-songs                        
                        Robson Couto, 2019  
 */  
 #define NOTE_B0 31  
 #define NOTE_C1 33  
 #define NOTE_CS1 35  
 #define NOTE_D1 37  
 #define NOTE_DS1 39  
 #define NOTE_E1 41  
 #define NOTE_F1 44  
 #define NOTE_FS1 46  
 #define NOTE_G1 49  
 #define NOTE_GS1 52  
 #define NOTE_A1 55  
 #define NOTE_AS1 58  
 #define NOTE_B1 62  
 #define NOTE_C2 65  
 #define NOTE_CS2 69  
 #define NOTE_D2 73  
 #define NOTE_DS2 78  
 #define NOTE_E2 82  
 #define NOTE_F2 87  
 #define NOTE_FS2 93  
 #define NOTE_G2 98  
 #define NOTE_GS2 104  
 #define NOTE_A2 110  
 #define NOTE_AS2 117  
 #define NOTE_B2 123  
 #define NOTE_C3 131  
 #define NOTE_CS3 139  
 #define NOTE_D3 147  
 #define NOTE_DS3 156  
 #define NOTE_E3 165  
 #define NOTE_F3 175  
 #define NOTE_FS3 185  
 #define NOTE_G3 196  
 #define NOTE_GS3 208  
 #define NOTE_A3 220  
 #define NOTE_AS3 233  
 #define NOTE_B3 247  
 #define NOTE_C4 262  
 #define NOTE_CS4 277  
 #define NOTE_D4 294  
 #define NOTE_DS4 311  
 #define NOTE_E4 330  
 #define NOTE_F4 349  
 #define NOTE_FS4 370  
 #define NOTE_G4 392  
 #define NOTE_GS4 415  
 #define NOTE_A4 440  
 #define NOTE_AS4 466  
 #define NOTE_B4 494  
 #define NOTE_C5 523  
 #define NOTE_CS5 554  
 #define NOTE_D5 587  
 #define NOTE_DS5 622  
 #define NOTE_E5 659  
 #define NOTE_F5 698  
 #define NOTE_FS5 740  
 #define NOTE_G5 784  
 #define NOTE_GS5 831  
 #define NOTE_A5 880  
 #define NOTE_AS5 932  
 #define NOTE_B5 988  
 #define NOTE_C6 1047  
 #define NOTE_CS6 1109  
 #define NOTE_D6 1175  
 #define NOTE_DS6 1245  
 #define NOTE_E6 1319  
 #define NOTE_F6 1397  
 #define NOTE_FS6 1480  
 #define NOTE_G6 1568  
 #define NOTE_GS6 1661  
 #define NOTE_A6 1760  
 #define NOTE_AS6 1865  
 #define NOTE_B6 1976  
 #define NOTE_C7 2093  
 #define NOTE_CS7 2217  
 #define NOTE_D7 2349  
 #define NOTE_DS7 2489  
 #define NOTE_E7 2637  
 #define NOTE_F7 2794  
 #define NOTE_FS7 2960  
 #define NOTE_G7 3136  
 #define NOTE_GS7 3322  
 #define NOTE_A7 3520  
 #define NOTE_AS7 3729  
 #define NOTE_B7 3951  
 #define NOTE_C8 4186  
 #define NOTE_CS8 4435  
 #define NOTE_D8 4699  
 #define NOTE_DS8 4978  
 #define REST 0  
 // change tempo to make the song slower or faster  
 int tempo1 = 140;  
 int tempo2 = 180;  
 int tempo3 = 140; 
 int tempo4 = 120;
 int tempo5 = 140;

 // change this to whichever pin you want to use  
 int buzzer = 11;  
 // notes of the moledy followed by the duration.  
 // a 4 means a quarter note, 8 an eighteenth , 16 sixteenth, so on  
 // !!negative numbers are used to represent dotted notes,  
 // so -4 means a dotted quarter note, that is, a quarter plus an eighteenth!!  
 int melody1[] = {  
  // Score available at https://musescore.com/user/8221/scores/26906  
  NOTE_C4,4, NOTE_C4,8,   
  NOTE_D4,-4, NOTE_C4,-4, NOTE_F4,-4,  
  NOTE_E4,-2, NOTE_C4,4, NOTE_C4,8,   
  NOTE_D4,-4, NOTE_C4,-4, NOTE_G4,-4,  
  NOTE_F4,-2, NOTE_C4,4, NOTE_C4,8,  
  NOTE_C5,-4, NOTE_A4,-4, NOTE_F4,-4,   
  NOTE_E4,-4, NOTE_D4,-4, NOTE_AS4,4, NOTE_AS4,8,  
  NOTE_A4,-4, NOTE_F4,-4, NOTE_G4,-4,  
  NOTE_F4,-2,  
 };  
 int melody2[] = {  
  // Score available at https://musescore.com/user/29944637/scores/5266155  
  NOTE_E5, 8, NOTE_D5, 8, NOTE_FS4, 4, NOTE_GS4, 4,   
  NOTE_CS5, 8, NOTE_B4, 8, NOTE_D4, 4, NOTE_E4, 4,   
  NOTE_B4, 8, NOTE_A4, 8, NOTE_CS4, 4, NOTE_E4, 4,  
  NOTE_A4, 2,   
 };  
 int melody3[] = {  
  // Score available at https://musescore.com/user/6208766/scores/1497501  
  NOTE_C5,4, //1  
  NOTE_F5,4, NOTE_F5,8, NOTE_G5,8, NOTE_F5,8, NOTE_E5,8,  
  NOTE_D5,4, NOTE_D5,4, NOTE_D5,4,  
  NOTE_G5,4, NOTE_G5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F5,8,  
  NOTE_E5,4, NOTE_C5,4, NOTE_C5,4,  
  NOTE_A5,4, NOTE_A5,8, NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8,  
  NOTE_F5,4, NOTE_D5,4, NOTE_C5,8, NOTE_C5,8,  
  NOTE_D5,4, NOTE_G5,4, NOTE_E5,4,  
  NOTE_F5,2, NOTE_C5,4, //8   
  NOTE_F5,4, NOTE_F5,8, NOTE_G5,8, NOTE_F5,8, NOTE_E5,8,  
  NOTE_D5,4, NOTE_D5,4, NOTE_D5,4,  
  NOTE_G5,4, NOTE_G5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F5,8,  
  NOTE_E5,4, NOTE_C5,4, NOTE_C5,4,  
  NOTE_A5,4, NOTE_A5,8, NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8,  
  NOTE_F5,4, NOTE_D5,4, NOTE_C5,8, NOTE_C5,8,  
  NOTE_D5,4, NOTE_G5,4, NOTE_E5,4,  
  NOTE_F5,2,  
    
 };  
int melody4[] = {

  // Pink Panther theme
  // Score available at https://musescore.com/benedictsong/the-pink-panther
  // Theme by Masato Nakamura, arranged by Teddy Mason

  REST,2, REST,4, REST,8, NOTE_DS4,8, 
  NOTE_E4,-4, REST,8, NOTE_FS4,8, NOTE_G4,-4, REST,8, NOTE_DS4,8,
  NOTE_E4,-8, NOTE_FS4,8,  NOTE_G4,-8, NOTE_C5,8, NOTE_B4,-8, NOTE_E4,8, NOTE_G4,-8, NOTE_B4,8,   
  NOTE_AS4,2, NOTE_A4,-16, NOTE_G4,-16, NOTE_E4,-16, NOTE_D4,-16, 
  NOTE_E4,2, REST,4, REST,8, NOTE_DS4,4,

  NOTE_E4,-4, REST,8, NOTE_FS4,8, NOTE_G4,-4, REST,8, NOTE_DS4,8,
  NOTE_E4,-8, NOTE_FS4,8,  NOTE_G4,-8, NOTE_C5,8, NOTE_B4,-8, NOTE_G4,8, NOTE_B4,-8, NOTE_E5,8,
  NOTE_DS5,1,   
  NOTE_D5,2, REST,4, REST,8, NOTE_DS4,8, 
  NOTE_E4,-4, REST,8, NOTE_FS4,8, NOTE_G4,-4, REST,8, NOTE_DS4,8,
  NOTE_E4,-8, NOTE_FS4,8,  NOTE_G4,-8, NOTE_C5,8, NOTE_B4,-8, NOTE_E4,8, NOTE_G4,-8, NOTE_B4,8,   
  
  NOTE_AS4,2, NOTE_A4,-16, NOTE_G4,-16, NOTE_E4,-16, NOTE_D4,-16, 
  NOTE_E4,-4, REST,4,
  REST,4, NOTE_E5,-8, NOTE_D5,8, NOTE_B4,-8, NOTE_A4,8, NOTE_G4,-8, NOTE_E4,-8,
  NOTE_AS4,16, NOTE_A4,-8, NOTE_AS4,16, NOTE_A4,-8, NOTE_AS4,16, NOTE_A4,-8, NOTE_AS4,16, NOTE_A4,-8,   
  NOTE_G4,-16, NOTE_E4,-16, NOTE_D4,-16, NOTE_E4,16, NOTE_E4,16, NOTE_E4,2,
 
};
int melody5[] = {

  // Take on me, by A-ha
  // Score available at https://musescore.com/user/27103612/scores/4834399
  // Arranged by Edward Truong

  NOTE_FS5,8, NOTE_FS5,8,NOTE_D5,8, NOTE_B4,8, REST,8, NOTE_B4,8, REST,8, NOTE_E5,8, 
  REST,8, NOTE_E5,8, REST,8, NOTE_E5,8, NOTE_GS5,8, NOTE_GS5,8, NOTE_A5,8, NOTE_B5,8,
  NOTE_A5,8, NOTE_A5,8, NOTE_A5,8, NOTE_E5,8, REST,8, NOTE_D5,8, REST,8, NOTE_FS5,8, 
  REST,8, NOTE_FS5,8, REST,8, NOTE_FS5,8, NOTE_E5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,8,
  NOTE_FS5,8, NOTE_FS5,8,NOTE_D5,8, NOTE_B4,8, REST,8, NOTE_B4,8, REST,8, NOTE_E5,8, 
  
  REST,8, NOTE_E5,8, REST,8, NOTE_E5,8, NOTE_GS5,8, NOTE_GS5,8, NOTE_A5,8, NOTE_B5,8,
  NOTE_A5,8, NOTE_A5,8, NOTE_A5,8, NOTE_E5,8, REST,8, NOTE_D5,8, REST,8, NOTE_FS5,8, 
  REST,8, NOTE_FS5,8, REST,8, NOTE_FS5,8, NOTE_E5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,8,
  NOTE_FS5,8, NOTE_FS5,8,NOTE_D5,8, NOTE_B4,8, REST,8, NOTE_B4,8, REST,8, NOTE_E5,8, 
  REST,8, NOTE_E5,8, REST,8, NOTE_E5,8, NOTE_GS5,8, NOTE_GS5,8, NOTE_A5,8, NOTE_B5,8,
  
  NOTE_A5,8, NOTE_A5,8, NOTE_A5,8, NOTE_E5,8, REST,8, NOTE_D5,8, REST,8, NOTE_FS5,8, 
  REST,8, NOTE_FS5,8, REST,8, NOTE_FS5,8, NOTE_E5,8, NOTE_E5,8, NOTE_FS5,8, NOTE_E5,8,
  
};
 // sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)  
 // there are two values per note (pitch and duration), so for each note there are four bytes  
 int notes1 = sizeof(melody1) / sizeof(melody1[0]) / 2;  
 int notes2 = sizeof(melody2) / sizeof(melody2[0]) / 2;  
 int notes3 = sizeof(melody3) / sizeof(melody3[0]) / 2;
 int notes4 = sizeof(melody4) / sizeof(melody4[0]) / 2;
 int notes5 = sizeof(melody5) / sizeof(melody4[0]) / 2;
 // this calculates the duration of a whole note in ms  
 int wholenote1 = (60000 * 4) / tempo1;  
 int wholenote2 = (60000 * 4) / tempo2;  
 int wholenote3 = (60000 * 4) / tempo3;
 int wholenote4 = (60000 * 4) / tempo4;
 int wholenote5 = (60000 * 4) / tempo5;
 int divider = 0, noteDuration = 0;  
 void setup() {  
  Serial.begin(9600);  
  Serial.println("Welcome to the Arduino Music Player");  
  Serial.println("Press a to play HAPPY BIRTHDAY TUNE");  
  Serial.println("Press b to play NOKIA TUNE");  
  Serial.println("Press c to play Merry CHRISTMAS TUNE");
  Serial.println("Press d to play PINK PANTHER SONG");
   Serial.println("Press e to play TAKE ON ME");
 }  


void HappyBday(){
   for (int thisNote = 0; thisNote < notes1 * 2; thisNote = thisNote + 2) {  
     // calculates the duration of each note  
    divider = melody1[thisNote + 1];  
    if (divider > 0) {  
    // regular note, just proceed  
    noteDuration = (wholenote1) / divider;  
    } else if (divider < 0) {  
    // dotted notes are represented with negative durations!!  
    noteDuration = (wholenote1) / abs(divider);  
    noteDuration *= 1.5; // increases the duration in half for dotted notes  
   }  
    // we only play the note for 90% of the duration, leaving 10% as a pause  
    tone(buzzer, melody1[thisNote], noteDuration * 0.9);  
    // Wait for the specief duration before playing the next note.  
    delay(noteDuration);  
    // stop the waveform generation before the next note.  
    noTone(buzzer);  
  }  
}

void nokia(){
  for (int thisNote = 0; thisNote < notes2 * 2; thisNote = thisNote + 2) {  
    // calculates the duration of each note  
    divider = melody2[thisNote + 1];  
    if (divider > 0) {  
    // regular note, just proceed  
    noteDuration = (wholenote2) / divider;  
    } else if (divider < 0) {  
    // dotted notes are represented with negative durations!!  
    noteDuration = (wholenote2) / abs(divider);  
    noteDuration *= 1.5; // increases the duration in half for dotted notes  
   }    
    tone(buzzer, melody2[thisNote], noteDuration * 0.9);  
    // Wait for the specief duration before playing the next note.  
    delay(noteDuration);  
    // stop the waveform generation before the next note.  
    noTone(buzzer);  
  }  
}

void xmas(){
  // iterate over the notes of the melody.  
    // Remember, the array is twice the number of notes (notes + durations)  
    for (int thisNote = 0; thisNote < notes3 * 2; thisNote = thisNote + 2) {  
    // calculates the duration of each note  
    divider = melody3[thisNote + 1];  
    if (divider > 0) {  
    // regular note, just proceed  
    noteDuration = (wholenote3) / divider;  
   } else if (divider < 0) {  
    // dotted notes are represented with negative durations!!  
    noteDuration = (wholenote3) / abs(divider);  
    noteDuration *= 1.5; // increases the duration in half for dotted notes  
   }  
    // we only play the note for 90% of the duration, leaving 10% as a pause  
    tone(buzzer, melody3[thisNote], noteDuration * 0.9);  
    // Wait for the specief duration before playing the next note.  
    delay(noteDuration);  
    // stop the waveform generation before the next note.  
    noTone(buzzer);  
  }  
}
void ppink() {
  // iterate over the notes of the melody.
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notes4 * 2; thisNote = thisNote + 2) {

    // calculates the duration of each note
    divider = melody4[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote4) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote4) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzer, melody4[thisNote], noteDuration * 0.9);

    // Wait for the specief duration before playing the next note.
    delay(noteDuration);

    // stop the waveform generation before the next note.
    noTone(buzzer);
  }
}
void takeonme() {
  // iterate over the notes of the melody.
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notes4 * 2; thisNote = thisNote + 2) {

    // calculates the duration of each note
    divider = melody5[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote5) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote5) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzer, melody5[thisNote], noteDuration * 0.9);

    // Wait for the specief duration before playing the next note.
    delay(noteDuration);

    // stop the waveform generation before the next note.
    noTone(buzzer);
  }
}

 void loop(){  
  if( Serial.available() > 0){  
   int value= Serial.read();  
   switch (value){ 
     
    case 'a':  
    Serial.println("PLAYING HAPPY BIRTHDAY TUNE");  
   	HappyBday();
    break;  
     
   case 'b':  
    Serial.println("PLAYING NOKIA TUNE");    
    nokia();
    break; 
     
  case 'c':  
    Serial.println("PLAYING MERRY CHRISTMAS TUNE");  
    xmas();
   break; 
     
  case 'd':  
    Serial.println("PLAYING PINK PANTHER SONG");  
    ppink();
   break; 
  
  case 'e':  
    Serial.println("PLAYING TAKE ON ME");  
    takeonme();
   break; 
     
  default: 
     Serial.println ("Invalid Input");
     break;
   }  
  }  
 }  
